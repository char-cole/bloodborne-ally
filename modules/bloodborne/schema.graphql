
# CATEGORY: ITEM
# these Types are loot, and facilitating acquisition of them is the purpose of this API.

"""
Completeness of a hunter's wardrobe affords the greatest aethetic flexibility.
"""
type Bloodborne_Attire implements Node {
    id: ID!
    name: String! @unique
    slot: Bloodborne_AttireSlot!
    set: Bloodborne_AttireSet
    pickUp: Bloodborne_Location
    droppedBy: Bloodborne_LootSource
    requiresDLC: Boolean!
}

"""
Required for purchasing certain weapons, attire, or other items.
May be found, gifted, or looted from corpses.
"""
type Bloodborne_Badge implements Node {
    id: ID!
    name: String! @unique
    trickWeapons: [Bloodborne_Weapon!] @relation(path: "Bloodborne_Badge=badge.Bloodborne_Weapon")
    offhandWeapons: [Bloodborne_Offhand!] @relation(path: "Bloodborne_Badge=badge.Bloodborne_Offhand")
    pickUp: Bloodborne_Location
    source: Bloodborne_LootSource
    requiresDLC: Boolean!
}

"""
Most gestures exist only for entertainment, but all are included for the sake of completion.
"""
type Bloodborne_Gesture implements Node {
    id: ID!
    name: String! @unique
    acquired: Bloodborne_Encounter @relation(path: "Bloodborne_Gesture=givesGesture.Bloodborne_Encounter")
}

"""
An arcane hunter tool used in the hunt.
"""
type Bloodborne_HunterTool implements Node {
    id: ID!
    name: String! @unique
    arcane: Int!
    location: Bloodborne_Location!
    quicksilverCost: Int!
    damageType: Bloodborne_Element
    """
    Arcane tools may have unique properties or uses
    """
    special: String
    requiresDLC: Boolean!
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

"""
Any non-badge item required for a quest step or to acquire loot.
"""
type Bloodborne_KeyItem implements Node {
    id: ID!
    name: String! @unique
    pickUp: Bloodborne_Location
    source: Bloodborne_LootSource
    isChalice: Boolean!
}

"""
Off-hand equipment is usually firearms, but some are specialized and cannot parry.
"""
type Bloodborne_Offhand implements Node {
    id: ID!
    name: String! @unique
    strength: Int!
    skill: Int!
    bloodtinge: Int!
    arcane: Int!
    location: Bloodborne_Location
    badge: Bloodborne_Badge
    """
    An entry of Null indicates that an off-hand weapon either deals physical damage or no damage.
    """
    element: Bloodborne_Element
    imprint: Bloodborne_Shape
    quicksilverCost: Int
    canParry: Boolean!
    """
    Certain off-hand equipment may have unique properties
    """
    special: String
    requiresDLC: Boolean!
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

"""
Caryll runes for use with the Workshop Rune Tool.
"""
type Bloodborne_Rune implements Node {
    id: ID!
    name: String! @unique
    isCovenant: Boolean
    tier: Int
    effect: String!
    pickUp: Bloodborne_Location
    source: Bloodborne_LootSource
    requiresDLC: Boolean!
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

"""
A trick weapon for hunting prey. Used in the main hand, and has a secondary (tricked) form.
"""
type Bloodborne_Weapon implements Node {
    id: ID!
    name: String! @unique
    strength: Int!
    skill: Int!
    bloodtinge: Int!
    arcane: Int!
    trickedAllowsOffhand: Boolean!
    location: Bloodborne_Location
    badge: Bloodborne_Badge
    """
    Optionally, glyphs may be recorded for easily obtaining alternate versions (online only)
    """
    lostGlyph: String
    """
    Optionally, glyphs may be recorded for easily obtaining alternate versions (online only)
    """
    uncannyGlyph: String
    imprints: [Bloodborne_Imprint!]! @relation(path: "Bloodborne_Weapon=weapon.Bloodborne_Imprint")
    defaultSerrated: Boolean!
    trickedSerrated: Boolean!
    defaultBlunt: Boolean!
    trickedBlunt: Boolean!
    defaultThrust: Boolean!
    trickedThrust: Boolean!
    defaultRighteous: Boolean!
    trickedRighteous: Boolean!
    defaultElement: Bloodborne_Element
    trickedElement: Bloodborne_Element
    requiresDLC: Boolean!
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

# CATEGORY: NPC
# these Types are named actors in the world; in general, these Types can be killed.

"""
This is a specific instance of a given boss enemy. Each appearance of a boss is a unique entry in
this Type, and all instances of this Type that share a name should be connected to a common
Loot Source of the same name.
"""
type Bloodborne_Boss implements Node {
    id: ID!
    name: String!
    location: Bloodborne_Location!
    """
    This field identifies the nearest lamp to the boss's fog wall,
    the quickest route to the boss from the Hunter's Dream.
    """
    quickestRoute: Bloodborne_Location
    mandatory: Boolean!
    isBeast: Boolean!
    isKin: Boolean!
    givesBadge: Bloodborne_Badge
    givesAttire: Bloodborne_Attire
    givesRune: Bloodborne_Rune
    givesWeapon: Bloodborne_Weapon
    givesKeyItem: Bloodborne_KeyItem
    connectLootSource: Bloodborne_LootSource
    """
    Notes may contain warnings about boss types or progression.
    """
    notes: String
}

"""
A type to unify all encounters and/or fights with characters or bosses of
the same name. For example, each Undead Giant Boss is connected to the
single Undead Giant Loot Source.
"""
type Bloodborne_LootSource implements Node {
    id: ID!
    name: String! @unique
    encounters: [Bloodborne_Encounter!]! @relation(path: "Bloodborne_LootSource=target.Bloodborne_Encounter")
    connectBoss: [Bloodborne_Boss!]! @relation(path: "Bloodborne_LootSource=connectLootSource.Bloodborne_Boss")
}

# CATEGORY: WORLD
# these Types are places and events that facilitate the acquisition of ITEM Types

"""
A set of information about where and when an NPC can be found,
as well as what may be acquired.
"""
type Bloodborne_Encounter implements Node {
    id: ID!
    """
    Names should be descriptive, but very brief.
    """
    name: String! @unique
    quest: Bloodborne_Quest!
    step: Int!
    location: Bloodborne_Location!
    firstAvailablePhase: Bloodborne_Phase!
    terminalPhase: Bloodborne_Phase
    availableAfter: String
    """
    Many despawn triggers are unverified. This API errs on the side of caution and displays the
    earliest reported triggers.
    """
    likelyUnavailableAfter: String
    target: Bloodborne_LootSource
    pickUp: Bloodborne_KeyItem
    givesBadge: Bloodborne_Badge
    givesAttire: Bloodborne_Attire
    givesGesture: Bloodborne_Gesture
    givesRune: Bloodborne_Rune
    givesKeyItem: Bloodborne_KeyItem
    """
    If "True", killing this character after this encounter will not disrupt any ongoing quests.
    Should be "True" if character must be killed.
    """
    safeToKill: Boolean!
    """
    Notes may contain reminders for unique requirements of certain encounters
    """
    notes: String
}

"""
The name of a particular lamp as given in-game.
"""
type Bloodborne_Location implements Node {
    id: ID!
    name: String! @unique
    headstone: Bloodborne_Headstone!
    boss: [Bloodborne_Boss!]! @relation(path: "Bloodborne_Location=location.Bloodborne_Boss")
    """
    Most locations can only be accessed after certain events.
    This field denotes the earliest possible route to the lantern.
    """
    unlock: String
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

"""
Headstones include chalice dungeons and are organized exactly as they are in-game,
such that each is a unique collection of unique lanterns.
The Hunter's Dream is also included for consistency.
"""
type Bloodborne_Headstone implements Node {
    id: ID!
    name: String! @unique
    lanterns: [Bloodborne_Location!] @relation(path: "Bloodborne_Headstone=headstone.Bloodborne_Location")
}

# CATEGORY: MECHANIC
# these Types offer no interaction to the player, but facilitate good organization of other Types

"""
There is no mechanical connection among pieces of a set of attire.
This type exists only as a checklist, as some sets are acquired piecemeal.
"""
type Bloodborne_AttireSet implements Node {
    id: ID!
    name: String! @unique
    badge: Bloodborne_Badge
    requiresKill: Bloodborne_LootSource
    pieces: [Bloodborne_Attire!]! @relation(path: "Bloodborne_AttireSet=set.Bloodborne_Attire")
}

"""
There are four slots for attire: "Headwear", "Garb", "Gloves", and "Trousers".
"""
type Bloodborne_AttireSlot implements Node {
    id: ID!
    slot: String! @unique
}

"""
Some trick weapons, all off-hand weapons, and most tools deal "elemental" (non-physical) damage.
Trick weapons that deal elemental damage cannot have their damage type modified by
items such as Fire Paper.
"""
type Bloodborne_Element implements Node {
    id: ID!
    type: String! @unique
    defaultWeapons: [Bloodborne_Weapon!] @relation(path: "Bloodborne_Element=defaultElement.Bloodborne_Weapon")
    trickedWeapons: [Bloodborne_Weapon!] @relation(path: "Bloodborne_Element=trickedElement.Bloodborne_Weapon")
    offhandWeapons: [Bloodborne_Offhand!] @relation(path: "Bloodborne_Element=element.Bloodborne_Offhand")
    tools: [Bloodborne_HunterTool!] @relation(path: "Bloodborne_Element=damageType.Bloodborne_HunterTool")
}

"""
A unique combination of blood gem shapes, tied to a specific version of a specific weapon.
"""
type Bloodborne_Imprint implements Node {
    id: ID!
    """
    This field exists for visual sorting in the database and should not be used in queries.
    The format is Version Weapon (for example, Uncanny Kos Parasite).
    """
    name: String! @unique
    weapon: Bloodborne_Weapon!
    version: Bloodborne_WeaponVersion!
    shape1: Bloodborne_Shape!
    shape2: Bloodborne_Shape!
    shape3: Bloodborne_Shape!
}

"""
An irreversible change in the state of the game world, during which
certain events, characters, and enemies are altered.
The phases are "Day", "Night", "Blood Moon", and "End of the Dream".
"""
type Bloodborne_Phase implements Node {
    id: ID!
    name: String!
    blocksEncounters: [Bloodborne_Encounter!]! @relation(path: "Bloodborne_Phase=terminalPhase.Bloodborne_Encounter")
}

"""
In this API, a quest is any sequence of actions required to acquire some item.
This list attempts to comprehensively expose any missable actions,
but excludes any sequence that is entirely mandatory.
For example, player must kill Father Gascoigne before killing Amelia to acquire Gold Pendant,
but neither step is possible to miss during progression.
"""
type Bloodborne_Quest implements Node {
    id: ID!
    """
    Quests are generaly named for the character that starts them. Single-encounter, non-boss
    enemies that drop important loot also count as quests.
    """
    name: String! @unique
    encounters: [Bloodborne_Encounter!]! @relation(path: "Bloodborne_Quest=quest.Bloodborne_Encounter")
}

"""
The shape of a gem determines which weapons it can be used in and influences its properties.
"""
type Bloodborne_Shape implements Node {
    id: ID!
    """
    Only gems of shape 'Triangle', 'Waning', 'Circle', or 'Droplet' are recorded.
    """
    shape: String! @unique
}

"""
All trick weapons are "Normal", "Lost", or "Uncanny".
"""
type Bloodborne_WeaponVersion implements Node {
    id: ID!
    name: String! @unique
}